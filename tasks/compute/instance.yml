- name: "cloud.provider.instance: Ensure instance's state as present [ {{ cloud_compute_instance.name }} ]"
  gce:
    name: "{{ cloud_compute_instance.name }}"
    zone: "{{ _cloud.provider.zone }}"
    machine_type: "{{ cloud_compute_instance.size | default(omit) }}"
    disk_size: "{{ cloud_compute_instance.boot.size | default(omit) }}"
    persistent_boot_disk: "{{ cloud_compute_instance.boot.persistent | default(omit) }}"
    image: "{{ cloud_compute_instance.image | default(omit) }}"
    image_family: "{{ cloud_compute_instance.image_family | default(omit) }}"
    external_ip: "{{ cloud_compute_instance.network.public | default(omit) }}"
    network: "{{ cloud_compute_instance.network.subnet }}"
    state: "present"

- name: "cloud.provider.instance: Ensure instance's state as started for [ {{ cloud_compute_instance.name }} ]"
  gce:
    name: "{{ cloud_compute_instance.name }}"
    zone: "{{ _cloud.provider.zone }}"
    machine_type: "{{ cloud_compute_instance.size | default(omit) }}"
    disk_size: "{{ cloud_compute_instance.boot.size | default(omit) }}"
    persistent_boot_disk: "{{ cloud_compute_instance.boot.persistent | default(omit) }}"
    image: "{{ cloud_compute_instance.image | default(omit) }}"
    image_family: "{{ cloud_compute_instance.image_family | default(omit) }}"
    external_ip: "{{ cloud_compute_instance.network.public | default(omit) }}"
    network: "{{ cloud_compute_instance.network.subnet }}"
    state: "started"

- name: "cloud.provider.instance: Gather Instance facts for [ {{ cloud_compute_instance.name }} ]"
  gce:
    name: "{{ cloud_compute_instance.name }}"
    zone: "{{ _cloud.provider.zone }}"
    machine_type: "{{ cloud_compute_instance.size | default(omit) }}"
    disk_size: "{{ cloud_compute_instance.boot.size | default(omit) }}"
    persistent_boot_disk: "{{ cloud_compute_instance.boot.persistent | default(omit) }}"
    image: "{{ cloud_compute_instance.image | default(omit) }}"
    image_family: "{{ cloud_compute_instance.image_family | default(omit) }}"
    external_ip: "{{ cloud_compute_instance.network.public | default(omit) }}"
    network: "{{ cloud_compute_instance.network.subnet }}"
    state: "present"
  register: cloud_compute_facts_instance

- name: "cloud.provider.instance: Set cloud_compute_facts.instance[ {{ cloud_compute_instance.name }} ]"
  vars:
    cloud_compute_facts: {}
  set_fact:
    cloud_compute_facts: "{{ cloud_compute_facts | combine({ 'instance': { cloud_compute_instance.name: cloud_compute_facts_instance.instance_data[0] } }, recursive=True) }}"

- name: "cloud.network.public: Set _cloud_facts.compute to cloud_compute_facts"
  set_fact:
    _cloud_facts: "{{ _cloud_facts | combine({ 'compute': cloud_compute_facts }, recursive=True) }}"

- name: "cloud.provider.instance: Ensure tags for instance [ {{ cloud_compute_instance.name }} ]"
  gce_tag:
    instance_name: "{{ cloud_compute_instance.name }}"
    zone: "{{ _cloud.provider.zone }}"
    tags: "{{ cloud_compute_instance.tags }}"
    state: "{{ cloud_compute_instance.state | default(omit) }}"
  when: cloud_compute_instance.tags is sequence

- name: "cloud.provider.instance: Ensure inventory for instance [ {{ cloud_compute_instance.name }} ]"
  add_host:
    name: "{{ cloud_compute_instance.name }}"
    groups: "{{ cloud_compute_instance.tags | default(omit) }}"
    ansible_user: "{{ cloud_compute_instance.credential.username }}"
    ansible_host: "{{ _cloud_facts.compute.instance[cloud_compute_instance.name].public_ip }}"
    ansible_ssh_host: "{{ _cloud_facts.compute.instance[cloud_compute_instance.name].public_ip }}"
    instance_facts: "{{ _cloud_facts.compute.instance[cloud_compute_instance.name] }}"

- name: "cloud.provider.instance: Wait for reachability of instance [ {{ cloud_compute_instance.name }} ]"
  delegate_to: "{{ cloud_compute_instance.name }}"
  wait_for_connection:
    timeout: 900

- name: "cloud.provider.instance: Gather facts from instance [ {{ cloud_compute_instance.name }} ]"
  delegate_to: "{{ cloud_compute_instance.name }}"
  setup:
